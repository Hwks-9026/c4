grammar;

use crate::lexer::Token;

pub Program: Vec<Stmt> = {
    Stmt+ => ?
};

Stmt: Stmt = {
    "let" <id: Ident> "|" <ty: Ident> "<-" <expr: Expr> ";" => Stmt::Let(id, ty, expr),
    "ret" <expr: Expr> ";" => Stmt::Ret(expr),
};

Expr: Expr = {
    <n:Number> => Expr::Number(n),
    <id: Ident> => Expr::Var(id),
    <id: Ident> "(" <args: ExprList> ")" => Expr::Call(id, args),
};

ExprList: Vec<Expr> = {
    <e:Expr> ** ","
};

Ident: String = {
    <Token::Identifier(id)> => id.to_string(),
};

Number: i32 = {
    <Token::Number(n)> => n.parse().unwrap(),
};

